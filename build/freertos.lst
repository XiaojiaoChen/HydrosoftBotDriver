ARM GAS  /tmp/cc8sQ50E.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"freertos.c"
  12              		.section	.rodata.str1.4,"aMS",%progbits,1
  13              		.align	2
  14              	.LC0:
  15 0000 73656E73 		.ascii	"sensorTask\000"
  15      6F725461 
  15      736B00
  16 000b 00       		.align	2
  17              	.LC2:
  18 000c 636F6D6D 		.ascii	"communicationTa\000"
  18      756E6963 
  18      6174696F 
  18      6E546100 
  19              		.text
  20              	.Ltext0:
  21              		.cfi_sections	.debug_frame
  22              		.section	.text.sensorTaskFunc,"ax",%progbits
  23              		.align	1
  24              		.global	sensorTaskFunc
  25              		.arch armv7-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu softvfp
  31              	sensorTaskFunc:
  32              	.LVL0:
  33              	.LFB72:
  34              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****  ******************************************************************************
   4:Core/Src/freertos.c ****  * File Name          : freertos.c
   5:Core/Src/freertos.c ****  * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****  ******************************************************************************
   7:Core/Src/freertos.c ****  * @attention
   8:Core/Src/freertos.c ****  *
   9:Core/Src/freertos.c ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/freertos.c ****  * All rights reserved.</center></h2>
  11:Core/Src/freertos.c ****  *
  12:Core/Src/freertos.c ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/freertos.c ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/freertos.c ****  * the License. You may obtain a copy of the License at:
  15:Core/Src/freertos.c ****  *                             www.st.com/SLA0044
  16:Core/Src/freertos.c ****  *
  17:Core/Src/freertos.c ****  ******************************************************************************
  18:Core/Src/freertos.c ****  */
  19:Core/Src/freertos.c **** /* USER CODE END Header */
ARM GAS  /tmp/cc8sQ50E.s 			page 2


  20:Core/Src/freertos.c **** 
  21:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/freertos.c **** #include "FreeRTOS.h"
  23:Core/Src/freertos.c **** #include "task.h"
  24:Core/Src/freertos.c **** #include "main.h"
  25:Core/Src/freertos.c **** #include "cmsis_os.h"
  26:Core/Src/freertos.c **** 
  27:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/freertos.c **** #include "myMain.h"
  30:Core/Src/freertos.c **** /* USER CODE END Includes */
  31:Core/Src/freertos.c **** 
  32:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* USER CODE END PTD */
  36:Core/Src/freertos.c **** 
  37:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* USER CODE END PD */
  41:Core/Src/freertos.c **** 
  42:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* USER CODE END PM */
  46:Core/Src/freertos.c **** 
  47:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  49:Core/Src/freertos.c **** 
  50:Core/Src/freertos.c **** /* USER CODE END Variables */
  51:Core/Src/freertos.c **** osThreadId sensorTaskHandle;
  52:Core/Src/freertos.c **** uint32_t sensorTaskBuffer[ 1024 ];
  53:Core/Src/freertos.c **** osStaticThreadDef_t sensorTaskControlBlock;
  54:Core/Src/freertos.c **** osThreadId communicationTaHandle;
  55:Core/Src/freertos.c **** uint32_t communicationTaskBuffer[ 1024 ];
  56:Core/Src/freertos.c **** osStaticThreadDef_t communicationTaskControlBlock;
  57:Core/Src/freertos.c **** 
  58:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  59:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  62:Core/Src/freertos.c **** 
  63:Core/Src/freertos.c **** void sensorTaskFunc(void const * argument);
  64:Core/Src/freertos.c **** void communicationTaskFunc(void const * argument);
  65:Core/Src/freertos.c **** 
  66:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  67:Core/Src/freertos.c **** 
  68:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  69:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  70:Core/Src/freertos.c **** 
  71:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  72:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  73:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  74:Core/Src/freertos.c **** 
  75:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
  76:Core/Src/freertos.c **** 		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
ARM GAS  /tmp/cc8sQ50E.s 			page 3


  77:Core/Src/freertos.c **** 	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  78:Core/Src/freertos.c **** 	*ppxIdleTaskStackBuffer = &xIdleStack[0];
  79:Core/Src/freertos.c **** 	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  80:Core/Src/freertos.c **** 	/* place for user code */
  81:Core/Src/freertos.c **** }
  82:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  83:Core/Src/freertos.c **** 
  84:Core/Src/freertos.c **** /**
  85:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  86:Core/Src/freertos.c ****   * @param  None
  87:Core/Src/freertos.c ****   * @retval None
  88:Core/Src/freertos.c ****   */
  89:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  90:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  91:Core/Src/freertos.c **** 
  92:Core/Src/freertos.c ****   /* USER CODE END Init */
  93:Core/Src/freertos.c **** 
  94:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  95:Core/Src/freertos.c **** 	/* add mutexes, ... */
  96:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  97:Core/Src/freertos.c **** 
  98:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  99:Core/Src/freertos.c **** 	/* add semaphores, ... */
 100:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 101:Core/Src/freertos.c **** 
 102:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 103:Core/Src/freertos.c **** 	/* start timers, add new ones, ... */
 104:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 105:Core/Src/freertos.c **** 
 106:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 107:Core/Src/freertos.c **** 	/* add queues, ... */
 108:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 109:Core/Src/freertos.c **** 
 110:Core/Src/freertos.c ****   /* Create the thread(s) */
 111:Core/Src/freertos.c ****   /* definition and creation of sensorTask */
 112:Core/Src/freertos.c ****   osThreadStaticDef(sensorTask, sensorTaskFunc, osPriorityHigh, 0, 1024, sensorTaskBuffer, &sensorT
 113:Core/Src/freertos.c ****   sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 114:Core/Src/freertos.c **** 
 115:Core/Src/freertos.c ****   /* definition and creation of communicationTa */
 116:Core/Src/freertos.c ****   osThreadStaticDef(communicationTa, communicationTaskFunc, osPriorityAboveNormal, 0, 1024, communi
 117:Core/Src/freertos.c ****   communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 118:Core/Src/freertos.c **** 
 119:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 120:Core/Src/freertos.c **** 	/* add threads, ... */
 121:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 122:Core/Src/freertos.c **** 
 123:Core/Src/freertos.c **** }
 124:Core/Src/freertos.c **** 
 125:Core/Src/freertos.c **** /* USER CODE BEGIN Header_sensorTaskFunc */
 126:Core/Src/freertos.c **** /**
 127:Core/Src/freertos.c ****  * @brief Function implementing the sensorTask thread.
 128:Core/Src/freertos.c ****  * @param argument: Not used
 129:Core/Src/freertos.c ****  * @retval None
 130:Core/Src/freertos.c ****  */
 131:Core/Src/freertos.c **** /* USER CODE END Header_sensorTaskFunc */
 132:Core/Src/freertos.c **** void sensorTaskFunc(void const * argument)
 133:Core/Src/freertos.c **** {
ARM GAS  /tmp/cc8sQ50E.s 			page 4


  35              		.loc 1 133 1 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 8
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		.loc 1 133 1 is_stmt 0 view .LVU1
  40 0000 00B5     		push	{lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 4
  43              		.cfi_offset 14, -4
  44 0002 83B0     		sub	sp, sp, #12
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 16
 134:Core/Src/freertos.c ****   /* USER CODE BEGIN sensorTaskFunc */
 135:Core/Src/freertos.c **** 	TickType_t xLastWakeTime = xTaskGetTickCount();
  47              		.loc 1 135 2 is_stmt 1 view .LVU2
  48              		.loc 1 135 29 is_stmt 0 view .LVU3
  49 0004 FFF7FEFF 		bl	xTaskGetTickCount
  50              	.LVL1:
  51              		.loc 1 135 13 view .LVU4
  52 0008 0190     		str	r0, [sp, #4]
 136:Core/Src/freertos.c **** 	TickType_t sensorTaskPeriod = pdMS_TO_TICKS(1);
  53              		.loc 1 136 2 is_stmt 1 view .LVU5
  54              	.LVL2:
  55              		.loc 1 136 2 is_stmt 0 view .LVU6
  56 000a 08E0     		b	.L3
  57              	.L5:
 137:Core/Src/freertos.c **** 	static int32_t loopTick = 0;
 138:Core/Src/freertos.c **** 	extern int32_t globalSensorTaskPeriod;
 139:Core/Src/freertos.c **** 	/* Infinite loop */
 140:Core/Src/freertos.c **** 	for (;;) {
 141:Core/Src/freertos.c **** 
 142:Core/Src/freertos.c **** 		if (++loopTick >= globalSensorTaskPeriod) {
 143:Core/Src/freertos.c **** 			loopTick = 0;
  58              		.loc 1 143 4 is_stmt 1 view .LVU7
  59              		.loc 1 143 13 is_stmt 0 view .LVU8
  60 000c 084B     		ldr	r3, .L6
  61 000e 0022     		movs	r2, #0
  62 0010 1A60     		str	r2, [r3]
 144:Core/Src/freertos.c **** 			loop();
  63              		.loc 1 144 4 is_stmt 1 view .LVU9
  64 0012 FFF7FEFF 		bl	loop
  65              	.LVL3:
  66              	.L2:
 145:Core/Src/freertos.c **** 		}
 146:Core/Src/freertos.c **** 		vTaskDelayUntil(&xLastWakeTime, sensorTaskPeriod);
  67              		.loc 1 146 3 view .LVU10
  68 0016 0121     		movs	r1, #1
  69 0018 01A8     		add	r0, sp, #4
  70 001a FFF7FEFF 		bl	vTaskDelayUntil
  71              	.LVL4:
 140:Core/Src/freertos.c **** 
  72              		.loc 1 140 8 view .LVU11
  73              	.L3:
 137:Core/Src/freertos.c **** 	extern int32_t globalSensorTaskPeriod;
  74              		.loc 1 137 2 view .LVU12
 138:Core/Src/freertos.c **** 	/* Infinite loop */
  75              		.loc 1 138 2 view .LVU13
ARM GAS  /tmp/cc8sQ50E.s 			page 5


 140:Core/Src/freertos.c **** 
  76              		.loc 1 140 2 view .LVU14
 142:Core/Src/freertos.c **** 			loopTick = 0;
  77              		.loc 1 142 3 view .LVU15
 142:Core/Src/freertos.c **** 			loopTick = 0;
  78              		.loc 1 142 7 is_stmt 0 view .LVU16
  79 001e 044A     		ldr	r2, .L6
  80 0020 1368     		ldr	r3, [r2]
  81 0022 0133     		adds	r3, r3, #1
 142:Core/Src/freertos.c **** 			loopTick = 0;
  82              		.loc 1 142 6 view .LVU17
  83 0024 1360     		str	r3, [r2]
 142:Core/Src/freertos.c **** 			loopTick = 0;
  84              		.loc 1 142 18 view .LVU18
  85 0026 034A     		ldr	r2, .L6+4
  86 0028 1268     		ldr	r2, [r2]
 142:Core/Src/freertos.c **** 			loopTick = 0;
  87              		.loc 1 142 6 view .LVU19
  88 002a 9342     		cmp	r3, r2
  89 002c EEDA     		bge	.L5
  90 002e F2E7     		b	.L2
  91              	.L7:
  92              		.align	2
  93              	.L6:
  94 0030 00000000 		.word	.LANCHOR0
  95 0034 00000000 		.word	globalSensorTaskPeriod
  96              		.cfi_endproc
  97              	.LFE72:
  99              		.section	.text.communicationTaskFunc,"ax",%progbits
 100              		.align	1
 101              		.global	communicationTaskFunc
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	communicationTaskFunc:
 108              	.LVL5:
 109              	.LFB73:
 147:Core/Src/freertos.c **** 
 148:Core/Src/freertos.c **** 	}
 149:Core/Src/freertos.c ****   /* USER CODE END sensorTaskFunc */
 150:Core/Src/freertos.c **** }
 151:Core/Src/freertos.c **** 
 152:Core/Src/freertos.c **** /* USER CODE BEGIN Header_communicationTaskFunc */
 153:Core/Src/freertos.c **** /**
 154:Core/Src/freertos.c ****  * @brief Function implementing the communicationTa thread.
 155:Core/Src/freertos.c ****  * @param argument: Not used
 156:Core/Src/freertos.c ****  * @retval None
 157:Core/Src/freertos.c ****  */
 158:Core/Src/freertos.c **** /* USER CODE END Header_communicationTaskFunc */
 159:Core/Src/freertos.c **** void communicationTaskFunc(void const * argument)
 160:Core/Src/freertos.c **** {
 110              		.loc 1 160 1 is_stmt 1 view -0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 8
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		.loc 1 160 1 is_stmt 0 view .LVU21
ARM GAS  /tmp/cc8sQ50E.s 			page 6


 115 0000 00B5     		push	{lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 161:Core/Src/freertos.c ****   /* USER CODE BEGIN communicationTaskFunc */
 162:Core/Src/freertos.c **** 	TickType_t xLastWakeTime = xTaskGetTickCount();
 122              		.loc 1 162 2 is_stmt 1 view .LVU22
 123              		.loc 1 162 29 is_stmt 0 view .LVU23
 124 0004 FFF7FEFF 		bl	xTaskGetTickCount
 125              	.LVL6:
 126              		.loc 1 162 13 view .LVU24
 127 0008 0190     		str	r0, [sp, #4]
 163:Core/Src/freertos.c **** 	TickType_t communicationTaskPeriod = pdMS_TO_TICKS(1);
 128              		.loc 1 163 2 is_stmt 1 view .LVU25
 129              	.LVL7:
 130              		.loc 1 163 2 is_stmt 0 view .LVU26
 131 000a 08E0     		b	.L10
 132              	.L12:
 164:Core/Src/freertos.c **** 	static int32_t loopTick = 0;
 165:Core/Src/freertos.c **** 	extern int32_t globalCommunicationTaskPeriod;
 166:Core/Src/freertos.c **** 	/* Infinite loop */
 167:Core/Src/freertos.c **** 	for (;;) {
 168:Core/Src/freertos.c **** 
 169:Core/Src/freertos.c **** 		if (++loopTick >= globalCommunicationTaskPeriod) {
 170:Core/Src/freertos.c **** 			loopTick = 0;
 133              		.loc 1 170 4 is_stmt 1 view .LVU27
 134              		.loc 1 170 13 is_stmt 0 view .LVU28
 135 000c 084B     		ldr	r3, .L13
 136 000e 0022     		movs	r2, #0
 137 0010 1A60     		str	r2, [r3]
 171:Core/Src/freertos.c **** 			loop2();
 138              		.loc 1 171 4 is_stmt 1 view .LVU29
 139 0012 FFF7FEFF 		bl	loop2
 140              	.LVL8:
 141              	.L9:
 172:Core/Src/freertos.c **** 		}
 173:Core/Src/freertos.c **** 		vTaskDelayUntil(&xLastWakeTime, communicationTaskPeriod);
 142              		.loc 1 173 3 view .LVU30
 143 0016 0121     		movs	r1, #1
 144 0018 01A8     		add	r0, sp, #4
 145 001a FFF7FEFF 		bl	vTaskDelayUntil
 146              	.LVL9:
 167:Core/Src/freertos.c **** 
 147              		.loc 1 167 8 view .LVU31
 148              	.L10:
 164:Core/Src/freertos.c **** 	extern int32_t globalCommunicationTaskPeriod;
 149              		.loc 1 164 2 view .LVU32
 165:Core/Src/freertos.c **** 	/* Infinite loop */
 150              		.loc 1 165 2 view .LVU33
 167:Core/Src/freertos.c **** 
 151              		.loc 1 167 2 view .LVU34
 169:Core/Src/freertos.c **** 			loopTick = 0;
 152              		.loc 1 169 3 view .LVU35
 169:Core/Src/freertos.c **** 			loopTick = 0;
ARM GAS  /tmp/cc8sQ50E.s 			page 7


 153              		.loc 1 169 7 is_stmt 0 view .LVU36
 154 001e 044A     		ldr	r2, .L13
 155 0020 1368     		ldr	r3, [r2]
 156 0022 0133     		adds	r3, r3, #1
 169:Core/Src/freertos.c **** 			loopTick = 0;
 157              		.loc 1 169 6 view .LVU37
 158 0024 1360     		str	r3, [r2]
 169:Core/Src/freertos.c **** 			loopTick = 0;
 159              		.loc 1 169 18 view .LVU38
 160 0026 034A     		ldr	r2, .L13+4
 161 0028 1268     		ldr	r2, [r2]
 169:Core/Src/freertos.c **** 			loopTick = 0;
 162              		.loc 1 169 6 view .LVU39
 163 002a 9342     		cmp	r3, r2
 164 002c EEDA     		bge	.L12
 165 002e F2E7     		b	.L9
 166              	.L14:
 167              		.align	2
 168              	.L13:
 169 0030 00000000 		.word	.LANCHOR1
 170 0034 00000000 		.word	globalCommunicationTaskPeriod
 171              		.cfi_endproc
 172              	.LFE73:
 174              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
 175              		.align	1
 176              		.global	vApplicationGetIdleTaskMemory
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	vApplicationGetIdleTaskMemory:
 183              	.LVL10:
 184              	.LFB70:
  76:Core/Src/freertos.c **** 	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 185              		.loc 1 76 73 is_stmt 1 view -0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
  77:Core/Src/freertos.c **** 	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 190              		.loc 1 77 2 view .LVU41
  77:Core/Src/freertos.c **** 	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 191              		.loc 1 77 24 is_stmt 0 view .LVU42
 192 0000 034B     		ldr	r3, .L16
 193 0002 0360     		str	r3, [r0]
  78:Core/Src/freertos.c **** 	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 194              		.loc 1 78 2 is_stmt 1 view .LVU43
  78:Core/Src/freertos.c **** 	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 195              		.loc 1 78 26 is_stmt 0 view .LVU44
 196 0004 034B     		ldr	r3, .L16+4
 197 0006 0B60     		str	r3, [r1]
  79:Core/Src/freertos.c **** 	/* place for user code */
 198              		.loc 1 79 2 is_stmt 1 view .LVU45
  79:Core/Src/freertos.c **** 	/* place for user code */
 199              		.loc 1 79 24 is_stmt 0 view .LVU46
 200 0008 8023     		movs	r3, #128
 201 000a 1360     		str	r3, [r2]
ARM GAS  /tmp/cc8sQ50E.s 			page 8


  81:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 202              		.loc 1 81 1 view .LVU47
 203 000c 7047     		bx	lr
 204              	.L17:
 205 000e 00BF     		.align	2
 206              	.L16:
 207 0010 00000000 		.word	.LANCHOR2
 208 0014 00000000 		.word	.LANCHOR3
 209              		.cfi_endproc
 210              	.LFE70:
 212              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 213              		.align	1
 214              		.global	MX_FREERTOS_Init
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	MX_FREERTOS_Init:
 221              	.LFB71:
  89:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 222              		.loc 1 89 29 is_stmt 1 view -0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 56
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226 0000 10B5     		push	{r4, lr}
 227              	.LCFI4:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 4, -8
 230              		.cfi_offset 14, -4
 231 0002 8EB0     		sub	sp, sp, #56
 232              	.LCFI5:
 233              		.cfi_def_cfa_offset 64
 112:Core/Src/freertos.c ****   sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 234              		.loc 1 112 3 view .LVU49
 235 0004 124C     		ldr	r4, .L20
 236 0006 0DF11C0C 		add	ip, sp, #28
 237 000a A646     		mov	lr, r4
 238 000c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 239 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 240 0014 9EE80700 		ldm	lr, {r0, r1, r2}
 241 0018 8CE80700 		stm	ip, {r0, r1, r2}
 113:Core/Src/freertos.c **** 
 242              		.loc 1 113 3 view .LVU50
 113:Core/Src/freertos.c **** 
 243              		.loc 1 113 22 is_stmt 0 view .LVU51
 244 001c 0021     		movs	r1, #0
 245 001e 07A8     		add	r0, sp, #28
 246 0020 FFF7FEFF 		bl	osThreadCreate
 247              	.LVL11:
 113:Core/Src/freertos.c **** 
 248              		.loc 1 113 20 view .LVU52
 249 0024 0B4B     		ldr	r3, .L20+4
 250 0026 1860     		str	r0, [r3]
 116:Core/Src/freertos.c ****   communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 251              		.loc 1 116 3 is_stmt 1 view .LVU53
 252 0028 EE46     		mov	lr, sp
 253 002a 04F11C0C 		add	ip, r4, #28
ARM GAS  /tmp/cc8sQ50E.s 			page 9


 254 002e BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 255 0032 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 256 0036 9CE80700 		ldm	ip, {r0, r1, r2}
 257 003a 8EE80700 		stm	lr, {r0, r1, r2}
 117:Core/Src/freertos.c **** 
 258              		.loc 1 117 3 view .LVU54
 117:Core/Src/freertos.c **** 
 259              		.loc 1 117 27 is_stmt 0 view .LVU55
 260 003e 0021     		movs	r1, #0
 261 0040 6846     		mov	r0, sp
 262 0042 FFF7FEFF 		bl	osThreadCreate
 263              	.LVL12:
 117:Core/Src/freertos.c **** 
 264              		.loc 1 117 25 view .LVU56
 265 0046 044B     		ldr	r3, .L20+8
 266 0048 1860     		str	r0, [r3]
 123:Core/Src/freertos.c **** 
 267              		.loc 1 123 1 view .LVU57
 268 004a 0EB0     		add	sp, sp, #56
 269              	.LCFI6:
 270              		.cfi_def_cfa_offset 8
 271              		@ sp needed
 272 004c 10BD     		pop	{r4, pc}
 273              	.L21:
 274 004e 00BF     		.align	2
 275              	.L20:
 276 0050 00000000 		.word	.LANCHOR4
 277 0054 00000000 		.word	.LANCHOR5
 278 0058 00000000 		.word	.LANCHOR6
 279              		.cfi_endproc
 280              	.LFE71:
 282              		.global	communicationTaskControlBlock
 283              		.global	communicationTaskBuffer
 284              		.global	communicationTaHandle
 285              		.global	sensorTaskControlBlock
 286              		.global	sensorTaskBuffer
 287              		.global	sensorTaskHandle
 288              		.section	.rodata
 289              		.align	2
 290              		.set	.LANCHOR4,. + 0
 291              	.LC4:
 292 0000 00000000 		.word	.LC0
 293 0004 00000000 		.word	sensorTaskFunc
 294 0008 0200     		.short	2
 295 000a 0000     		.space	2
 296 000c 00000000 		.word	0
 297 0010 00040000 		.word	1024
 298 0014 00000000 		.word	sensorTaskBuffer
 299 0018 00000000 		.word	sensorTaskControlBlock
 300              	.LC5:
 301 001c 0C000000 		.word	.LC2
 302 0020 00000000 		.word	communicationTaskFunc
 303 0024 0100     		.short	1
 304 0026 0000     		.space	2
 305 0028 00000000 		.word	0
 306 002c 00040000 		.word	1024
 307 0030 00000000 		.word	communicationTaskBuffer
ARM GAS  /tmp/cc8sQ50E.s 			page 10


 308 0034 00000000 		.word	communicationTaskControlBlock
 309              		.section	.bss.communicationTaHandle,"aw",%nobits
 310              		.align	2
 311              		.set	.LANCHOR6,. + 0
 314              	communicationTaHandle:
 315 0000 00000000 		.space	4
 316              		.section	.bss.communicationTaskBuffer,"aw",%nobits
 317              		.align	2
 320              	communicationTaskBuffer:
 321 0000 00000000 		.space	4096
 321      00000000 
 321      00000000 
 321      00000000 
 321      00000000 
 322              		.section	.bss.communicationTaskControlBlock,"aw",%nobits
 323              		.align	3
 326              	communicationTaskControlBlock:
 327 0000 00000000 		.space	1152
 327      00000000 
 327      00000000 
 327      00000000 
 327      00000000 
 328              		.section	.bss.loopTick.0,"aw",%nobits
 329              		.align	2
 330              		.set	.LANCHOR1,. + 0
 333              	loopTick.0:
 334 0000 00000000 		.space	4
 335              		.section	.bss.loopTick.1,"aw",%nobits
 336              		.align	2
 337              		.set	.LANCHOR0,. + 0
 340              	loopTick.1:
 341 0000 00000000 		.space	4
 342              		.section	.bss.sensorTaskBuffer,"aw",%nobits
 343              		.align	2
 346              	sensorTaskBuffer:
 347 0000 00000000 		.space	4096
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.section	.bss.sensorTaskControlBlock,"aw",%nobits
 349              		.align	3
 352              	sensorTaskControlBlock:
 353 0000 00000000 		.space	1152
 353      00000000 
 353      00000000 
 353      00000000 
 353      00000000 
 354              		.section	.bss.sensorTaskHandle,"aw",%nobits
 355              		.align	2
 356              		.set	.LANCHOR5,. + 0
 359              	sensorTaskHandle:
 360 0000 00000000 		.space	4
 361              		.section	.bss.xIdleStack,"aw",%nobits
 362              		.align	2
 363              		.set	.LANCHOR3,. + 0
 366              	xIdleStack:
ARM GAS  /tmp/cc8sQ50E.s 			page 11


 367 0000 00000000 		.space	512
 367      00000000 
 367      00000000 
 367      00000000 
 367      00000000 
 368              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 369              		.align	3
 370              		.set	.LANCHOR2,. + 0
 373              	xIdleTaskTCBBuffer:
 374 0000 00000000 		.space	1152
 374      00000000 
 374      00000000 
 374      00000000 
 374      00000000 
 375              		.text
 376              	.Letext0:
 377              		.file 2 "/home/softarm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 378              		.file 3 "/home/softarm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 379              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 380              		.file 5 "/home/softarm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 381              		.file 6 "/home/softarm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 382              		.file 7 "/home/softarm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 383              		.file 8 "/home/softarm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 384              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 385              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 386              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 387              		.file 12 "User/Inc/myMain.h"
ARM GAS  /tmp/cc8sQ50E.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/cc8sQ50E.s:13     .rodata.str1.4:0000000000000000 $d
     /tmp/cc8sQ50E.s:23     .text.sensorTaskFunc:0000000000000000 $t
     /tmp/cc8sQ50E.s:31     .text.sensorTaskFunc:0000000000000000 sensorTaskFunc
     /tmp/cc8sQ50E.s:94     .text.sensorTaskFunc:0000000000000030 $d
     /tmp/cc8sQ50E.s:100    .text.communicationTaskFunc:0000000000000000 $t
     /tmp/cc8sQ50E.s:107    .text.communicationTaskFunc:0000000000000000 communicationTaskFunc
     /tmp/cc8sQ50E.s:169    .text.communicationTaskFunc:0000000000000030 $d
     /tmp/cc8sQ50E.s:175    .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/cc8sQ50E.s:182    .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/cc8sQ50E.s:207    .text.vApplicationGetIdleTaskMemory:0000000000000010 $d
     /tmp/cc8sQ50E.s:213    .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/cc8sQ50E.s:220    .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/cc8sQ50E.s:276    .text.MX_FREERTOS_Init:0000000000000050 $d
     /tmp/cc8sQ50E.s:326    .bss.communicationTaskControlBlock:0000000000000000 communicationTaskControlBlock
     /tmp/cc8sQ50E.s:320    .bss.communicationTaskBuffer:0000000000000000 communicationTaskBuffer
     /tmp/cc8sQ50E.s:314    .bss.communicationTaHandle:0000000000000000 communicationTaHandle
     /tmp/cc8sQ50E.s:352    .bss.sensorTaskControlBlock:0000000000000000 sensorTaskControlBlock
     /tmp/cc8sQ50E.s:346    .bss.sensorTaskBuffer:0000000000000000 sensorTaskBuffer
     /tmp/cc8sQ50E.s:359    .bss.sensorTaskHandle:0000000000000000 sensorTaskHandle
     /tmp/cc8sQ50E.s:289    .rodata:0000000000000000 $d
     /tmp/cc8sQ50E.s:310    .bss.communicationTaHandle:0000000000000000 $d
     /tmp/cc8sQ50E.s:317    .bss.communicationTaskBuffer:0000000000000000 $d
     /tmp/cc8sQ50E.s:323    .bss.communicationTaskControlBlock:0000000000000000 $d
     /tmp/cc8sQ50E.s:329    .bss.loopTick.0:0000000000000000 $d
     /tmp/cc8sQ50E.s:333    .bss.loopTick.0:0000000000000000 loopTick.0
     /tmp/cc8sQ50E.s:336    .bss.loopTick.1:0000000000000000 $d
     /tmp/cc8sQ50E.s:340    .bss.loopTick.1:0000000000000000 loopTick.1
     /tmp/cc8sQ50E.s:343    .bss.sensorTaskBuffer:0000000000000000 $d
     /tmp/cc8sQ50E.s:349    .bss.sensorTaskControlBlock:0000000000000000 $d
     /tmp/cc8sQ50E.s:355    .bss.sensorTaskHandle:0000000000000000 $d
     /tmp/cc8sQ50E.s:362    .bss.xIdleStack:0000000000000000 $d
     /tmp/cc8sQ50E.s:366    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/cc8sQ50E.s:369    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/cc8sQ50E.s:373    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer

UNDEFINED SYMBOLS
xTaskGetTickCount
loop
vTaskDelayUntil
globalSensorTaskPeriod
loop2
globalCommunicationTaskPeriod
osThreadCreate
